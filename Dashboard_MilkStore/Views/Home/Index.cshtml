@model Dashboard_MilkStore.Models.Home.HomeViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<link rel="stylesheet" href="~/css/statistics-1.css" />
<link rel="stylesheet" href="~/css/responsive-ip.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<div class="container-fluid">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <div class="dashboard-title-container">
            <div class="dashboard-icon">
                <i class="fas fa-tachometer-alt"></i>
            </div>
            <div class="dashboard-title-content">
                <h1 class="dashboard-title">Dashboard <span style="color: #4cc9f0;">Analytics</span></h1>
                <p class="dashboard-subtitle">Tổng quan về doanh thu và hoạt động kinh doanh</p>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row equal-height-cards">
        <div class="col-md-3 col-sm-6 col-12">
            <div class="stat-card bg-info">
                <div class="stat-card-inner">
                    <h2 class="stat-value">@(Model.YearlyRevenue?.TotalRevenue.ToString("N0") ?? "0")</h2>
                    <p class="stat-label">Tổng doanh thu năm @Model.CurrentYear</p>
                </div>
                <div class="stat-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
            </div>
        </div>

        <div class="col-md-3 col-sm-6 col-12">
            <div class="stat-card bg-success">
                <div class="stat-card-inner">
                    <h2 class="stat-value">@(Model.YearlyRevenue?.MonthlyRevenues?.Count(m => m.Revenue > 0) ?? 0)</h2>
                    <p class="stat-label">Tháng có doanh thu</p>
                </div>
                <div class="stat-icon">
                    <i class="fas fa-calendar-check"></i>
                </div>
            </div>
        </div>

        <div class="col-md-3 col-sm-6 col-12">
            <div class="stat-card bg-warning">
                <div class="stat-card-inner">
                    @{
                        var maxRevenueMonth = Model.YearlyRevenue?.MonthlyRevenues?.OrderByDescending(m => m.Revenue).FirstOrDefault();
                    }
                    <h2 class="stat-value">@(maxRevenueMonth?.MonthName ?? "N/A")</h2>
                    <p class="stat-label">Tháng doanh thu cao nhất</p>
                </div>
                <div class="stat-icon">
                    <i class="fas fa-trophy"></i>
                </div>
            </div>
        </div>

        <div class="col-md-3 col-sm-6 col-12">
            <div class="stat-card bg-danger">
                <div class="stat-card-inner">
                    @{
                        var avgRevenue = Model.YearlyRevenue?.MonthlyRevenues?.Where(m => m.Revenue > 0)?.Average(m => m.Revenue) ?? 0;
                    }
                    <h2 class="stat-value">@avgRevenue.ToString("N0")</h2>
                    <p class="stat-label">Doanh thu trung bình/tháng</p>
                </div>
                <div class="stat-icon">
                    <i class="fas fa-calculator"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Real-time Dashboard Statistics -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card realtime-stats-card">
                <div class="card-header realtime-stats-header">
                    <div class="d-flex align-items-center">
                        <div class="realtime-header-icon">
                            <i class="fas fa-bolt"></i>
                        </div>
                        <div class="realtime-header-content">
                            <h5 class="realtime-header-title">THỐNG KÊ THỜI GIAN THỰC</h5>
                            <div class="realtime-header-subtitle">
                                <span class="pulse-dot"></span>
                                <span>CẬP NHẬT MỖI 30 GIÂY</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="realtime-stats-container">
                        <!-- Online Customers -->
                        <div class="mini-stat-item" style="--stat-color: #6c5ce7;">
                            <div class="mini-stat-icon">
                                <i class="fas fa-users"></i>
                            </div>
                            <div class="mini-stat-info">
                                <h3 class="mini-stat-value" id="online-customers">@(Model.DashboardStats?.OnlineCustomersCount.ToString("N0") ?? "0")</h3>
                                <p class="mini-stat-label">Khách hàng online</p>
                                <div class="mini-stat-trend">
                                    <i class="fas fa-arrow-up"></i>
                                    <span>Đang hoạt động</span>
                                </div>
                            </div>
                        </div>

                        <!-- Today's Revenue -->
                        <div class="mini-stat-item" style="--stat-color: #00b894;">
                            <div class="mini-stat-icon">
                                <i class="fas fa-money-bill-wave"></i>
                            </div>
                            <div class="mini-stat-info">
                                <h3 class="mini-stat-value" id="today-revenue">@(Model.DashboardStats?.TodayRevenue.ToString("N0") ?? "0")</h3>
                                <p class="mini-stat-label">Doanh thu hôm nay</p>
                                <div class="mini-stat-trend">
                                    <i class="fas fa-chart-line"></i>
                                    <span>Hôm nay</span>
                                </div>
                            </div>
                        </div>

                        <!-- Today's Sold Products -->
                        <div class="mini-stat-item" style="--stat-color: #fdcb6e;">
                            <div class="mini-stat-icon">
                                <i class="fas fa-box"></i>
                            </div>
                            <div class="mini-stat-info">
                                <h3 class="mini-stat-value" id="today-products">@(Model.DashboardStats?.TodaySoldProductsCount.ToString("N0") ?? "0")</h3>
                                <p class="mini-stat-label">Sản phẩm bán hôm nay</p>
                                <div class="mini-stat-trend">
                                    <i class="fas fa-shopping-cart"></i>
                                    <span>Đã bán</span>
                                </div>
                            </div>
                        </div>

                        <!-- Pending Orders -->
                        <div class="mini-stat-item" style="--stat-color: #e17055;">
                            <div class="mini-stat-icon">
                                <i class="fas fa-clock"></i>
                            </div>
                            <div class="mini-stat-info">
                                <h3 class="mini-stat-value" id="pending-orders">@(Model.DashboardStats?.PendingOrdersCount.ToString("N0") ?? "0")</h3>
                                <p class="mini-stat-label">Đơn hàng chờ xử lý</p>
                                <div class="mini-stat-trend">
                                    <i class="fas fa-hourglass-half"></i>
                                    <span>Đang chờ</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Revenue Charts - Slideshow Container -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="statistic-title" id="chart-header">
                        <div class="statistic-icon">
                            <i class="fas fa-chart-bar"></i>
                        </div>
                        <span class="statistic-main">Doanh thu theo tháng năm</span>
                        <span class="statistic-sub">@Model.CurrentYear</span>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Slideshow Container -->
                    <div class="chart-slideshow">
                        <!-- Slide 1: Revenue Chart -->
                        <div class="chart-slide active" id="revenueChartSlide">
                            <div class="chart-container">
                                <h4 class="chart-title">Biểu đồ cột doanh thu</h4>
                                <canvas id="revenueChart"></canvas>
                            </div>
                        </div>

                        <!-- Slide 2: Product Sales Chart (Initially Hidden) -->
                        <div class="chart-slide" id="productSalesSlide">
                            <div class="chart-container">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h4 class="chart-title" style="color: #ff6b6b; font-weight: 700; margin-bottom: 0;">
                                        Biểu đồ doanh số sản phẩm tháng <span id="selectedMonthYear" style="color: #ff6b6b;"></span>
                                    </h4>
                                    <button class="btn btn-sm btn-outline-primary back-to-revenue" onclick="showRevenueChart()">
                                        <i class="fas fa-arrow-left"></i> Quay lại biểu đồ doanh thu
                                    </button>
                                </div>
                                <div class="chart-content d-flex flex-column">
                                    <div class="chart-area">
                                        <canvas id="productSalesChart"></canvas>
                                    </div>
                                    <div class="product-details mt-3">
                                        <div class="product-sales-info">
                                            <h5 class="text-center mb-3">Thông tin chi tiết</h5>
                                            <div id="productSalesInfo" class="product-list">
                                                <div class="text-center">
                                                    <div class="spinner-border text-primary" role="status">
                                                        <span class="visually-hidden">Loading...</span>
                                                    </div>
                                                    <p class="mt-2">Đang tải dữ liệu...</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Trend Chart -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="statistic-title">
                        <div class="statistic-icon" style="color: #00c6fb;">
                            <i class="fas fa-chart-line"></i>
                        </div>
                        <span class="statistic-main">Doanh thu tích lũy</span>
                        <span class="statistic-sub" style="color: #00c6fb;">@Model.CurrentYear</span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <h4 class="chart-title" style="color: #005bea; font-weight: 700;">Biểu đồ doanh thu tích lũy</h4>
                        <canvas id="trendChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/js/chart-responsive.js"></script>
    <script>
        // Hàm cập nhật thống kê dashboard
        function updateDashboardStats() {
            fetch('/Home/GetDashboardStats')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Cập nhật giá trị và thêm hiệu ứng
                        updateStatValue('online-customers', data.data.onlineCustomersCount);
                        updateStatValue('today-revenue', data.data.todayRevenue);
                        updateStatValue('today-products', data.data.todaySoldProductsCount);
                        updateStatValue('pending-orders', data.data.pendingOrdersCount);
                    }
                })
                .catch(error => console.error('Lỗi khi cập nhật thống kê:', error));
        }

        // Hàm cập nhật giá trị với hiệu ứng
        function updateStatValue(elementId, newValue) {
            const element = document.getElementById(elementId);
            const currentValue = parseInt(element.textContent.replace(/,/g, ''));

            // Định dạng số
            const formattedValue = new Intl.NumberFormat('vi-VN').format(newValue);

            // Cập nhật giá trị
            element.textContent = formattedValue;

            // Thêm hiệu ứng nếu giá trị thay đổi
            if (currentValue !== newValue) {
                // Thêm class để kích hoạt hiệu ứng
                element.classList.add('value-updated');

                // Thêm hiệu ứng cho icon
                const statItem = element.closest('.mini-stat-item');
                if (statItem) {
                    const icon = statItem.querySelector('.mini-stat-icon');
                    if (icon) {
                        icon.style.transform = 'scale(1.2) rotate(10deg)';
                        setTimeout(() => {
                            icon.style.transform = '';
                        }, 500);
                    }
                }

                // Xóa class sau khi hiệu ứng hoàn thành
                setTimeout(() => {
                    element.classList.remove('value-updated');
                }, 1000);
            }
        }

        // Cập nhật thống kê mỗi 30 giây
        setInterval(updateDashboardStats, 30000);
    </script>
    <script>
        // Dữ liệu doanh thu từ Model
        const monthlyRevenue = [
            @foreach (var item in Model.YearlyRevenue?.MonthlyRevenues ?? new List<Dashboard_MilkStore.Models.Statistics.MonthlyRevenueViewModel>())
            {
                <text>
                {
                    month: @item.Month,
                    monthName: "@item.MonthName",
                    revenue: @Html.Raw(item.Revenue.ToString(System.Globalization.CultureInfo.InvariantCulture))
                },
                </text>
            }
        ];

        const currentYear = @Model.CurrentYear;

        // Hàm để làm sáng màu
        function lightenColor(color, percent) {
            const num = parseInt(color.replace("#", ""), 16),
                amt = Math.round(2.55 * percent),
                R = (num >> 16) + amt,
                G = (num >> 8 & 0x00FF) + amt,
                B = (num & 0x0000FF) + amt;
            return "#" + (
                0x1000000 +
                (R < 255 ? (R < 1 ? 0 : R) : 255) * 0x10000 +
                (G < 255 ? (G < 1 ? 0 : G) : 255) * 0x100 +
                (B < 255 ? (B < 1 ? 0 : B) : 255)
            ).toString(16).slice(1);
        }

        // Hàm để làm tối màu
        function darkenColor(color, percent) {
            const num = parseInt(color.replace("#", ""), 16),
                amt = Math.round(2.55 * percent),
                R = (num >> 16) - amt,
                G = (num >> 8 & 0x00FF) - amt,
                B = (num & 0x0000FF) - amt;
            return "#" + (
                0x1000000 +
                (R > 0 ? (R > 255 ? 255 : R) : 0) * 0x10000 +
                (G > 0 ? (G > 255 ? 255 : G) : 0) * 0x100 +
                (B > 0 ? (B > 255 ? 255 : B) : 0)
            ).toString(16).slice(1);
        }

        // Cấu hình chung cho biểu đồ
        function getCommonChartOptions(title) {
            // Xác định tỷ lệ khung hình dựa trên kích thước màn hình và hướng
            const width = window.innerWidth;
            const height = window.innerHeight;
            const isLandscape = width > height;
            let aspectRatio;

            if (width < 320) {
                // iPhone 4/4S và các thiết bị cực nhỏ
                aspectRatio = isLandscape ? 2 : 1.2;
            } else if (width < 375) {
                // iPhone 5/5S/5C/SE (1st gen)
                aspectRatio = isLandscape ? 2 : 1.3;
            } else if (width < 390) {
                // iPhone 6/6S/7/8/SE (2nd gen)
                aspectRatio = isLandscape ? 2 : 1.4;
            } else if (width < 414) {
                // iPhone X/XS/11 Pro/12 Mini/13 Mini
                aspectRatio = isLandscape ? 2 : 1.5;
            } else if (width < 428) {
                // iPhone XR/11/12/12 Pro/13/13 Pro/14/14 Pro
                aspectRatio = isLandscape ? 2 : 1.6;
            } else if (width < 576) {
                // iPhone 12 Pro Max/13 Pro Max/14 Plus/14 Pro Max/15/15 Pro/15 Pro Max/16/16 Pro/16 Pro Max
                aspectRatio = isLandscape ? 2 : 1.7;
            } else if (width < 768) {
                aspectRatio = 1.8;
            } else {
                aspectRatio = 2;
            }

            return {
                responsive: true,
                maintainAspectRatio: true,
                aspectRatio: aspectRatio,
                animation: {
                    duration: 1000,
                    easing: 'easeOutQuart',
                    delay: function(context) {
                        // Tạo hiệu ứng xuất hiện lần lượt cho các cột
                        return context.dataIndex * 50;
                    }
                },
                plugins: {
                    legend: {
                        position: function() {
                            return window.innerWidth < 576 ? 'bottom' : 'top';
                        },
                        align: 'center',
                        labels: {
                            font: {
                                size: function() {
                                    return window.innerWidth < 576 ? 10 : (window.innerWidth < 768 ? 12 : 16);
                                },
                                family: "'Segoe UI', 'Roboto', sans-serif",
                                weight: 'bold'
                            },
                            padding: function() {
                                return window.innerWidth < 576 ? 8 : (window.innerWidth < 768 ? 12 : 20);
                            },
                            usePointStyle: true,
                            pointStyle: 'circle',
                            boxWidth: function() {
                                return window.innerWidth < 576 ? 8 : (window.innerWidth < 768 ? 10 : 12);
                            },
                            color: '#333'
                        }
                    },
                    title: {
                        display: false // Đã có tiêu đề bên ngoài
                    },
                    tooltip: {
                        backgroundColor: 'rgba(255, 255, 255, 0.9)',
                        titleColor: '#333',
                        bodyColor: '#333',
                        titleFont: {
                            size: 16,
                            weight: 'bold',
                            family: "'Inter', sans-serif"
                        },
                        bodyFont: {
                            size: 14,
                            family: "'Inter', sans-serif"
                        },
                        padding: 12,
                        cornerRadius: 8,
                        displayColors: true,
                        borderColor: '#ddd',
                        borderWidth: 1,
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed.y !== null) {
                                    label += new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(context.parsed.y);
                                }
                                return label;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(200, 200, 200, 0.2)',
                            drawBorder: false
                        },
                        ticks: {
                            font: {
                                size: function() {
                                    return window.innerWidth < 576 ? 10 : 14;
                                },
                                family: "'Segoe UI', 'Roboto', sans-serif",
                                weight: 'bold'
                            },
                            padding: function() {
                                return window.innerWidth < 576 ? 5 : 12;
                            },
                            color: '#333',
                            callback: function(value) {
                                // Định dạng ngắn gọn hơn cho màn hình nhỏ
                                if (window.innerWidth < 576) {
                                    if (value >= 1000000) {
                                        return (value / 1000000).toFixed(1) + 'M';
                                    } else if (value >= 1000) {
                                        return (value / 1000).toFixed(0) + 'K';
                                    }
                                    return value;
                                }
                                return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(value);
                            },
                            maxTicksLimit: function() {
                                return window.innerWidth < 576 ? 5 : 8;
                            }
                        }
                    },
                    x: {
                        grid: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            font: {
                                size: function() {
                                    return window.innerWidth < 576 ? 8 : 14;
                                },
                                family: "'Segoe UI', 'Roboto', sans-serif",
                                weight: 'bold'
                            },
                            padding: function() {
                                return window.innerWidth < 576 ? 2 : 12;
                            },
                            color: '#333',
                            // Hiển thị nhãn ngắn gọn hơn trên màn hình nhỏ
                            callback: function(value, index) {
                                const label = this.getLabelForValue(index);
                                if (window.innerWidth < 576) {
                                    // Chỉ hiển thị số tháng (T1, T2, ...)
                                    return 'T' + (index + 1);
                                } else if (window.innerWidth < 768) {
                                    // Hiển thị T01, T02, ...
                                    return 'T' + (index + 1).toString().padStart(2, '0');
                                }
                                return label;
                            },
                            autoSkip: true,
                            maxRotation: 0,
                            minRotation: 0
                        }
                    }
                }
            };
        }

        // Vẽ biểu đồ doanh thu
        function renderCharts() {
            let labels = [];
            let data = [];

            for (let month = 1; month <= 12; month++) {
                const monthStr = month.toString().padStart(2, '0');
                labels.push(`Tháng ${monthStr}`);
                data.push(0);
            }

            monthlyRevenue.forEach(item => {
                const index = item.month - 1;
                data[index] = item.revenue;
            });

            // Màu gradient hiện đại
            const colorPairs = [
                { start: '#0061ff', end: '#60efff' }, // Modern Blue
                { start: '#ff0f7b', end: '#f89b29' }, // Sunset
                { start: '#00b09b', end: '#96c93d' }, // Green Gradient
                { start: '#8e2de2', end: '#4a00e0' }, // Vibrant Purple
                { start: '#fc4a1a', end: '#f7b733' }, // Orange to Yellow
                { start: '#00c6fb', end: '#005bea' }, // Sky Blue
                { start: '#5f2c82', end: '#49a09d' }, // Purple to Teal
                { start: '#4facfe', end: '#00f2fe' }, // Electric Blue
                { start: '#667eea', end: '#764ba2' }, // Indigo to Purple
                { start: '#ff758c', end: '#ff7eb3' }, // Coral to Pink
                { start: '#06beb6', end: '#48b1bf' }, // Teal to Blue
                { start: '#eb3349', end: '#f45c43' }  // Red to Orange
            ];

            // Vẽ biểu đồ cột
            renderBarChart(labels, data, colorPairs);

            // Vẽ biểu đồ đường
            renderTrendChart(labels, data);

            // Thêm hiệu ứng animation cho các thẻ
            document.querySelectorAll('.stat-card').forEach((box, index) => {
                box.style.animation = `fadeIn 0.5s ease ${index * 0.1}s forwards`;
                box.style.opacity = 0;
            });

            // Thêm hiệu ứng hover cho biểu đồ
            document.querySelectorAll('.chart-container').forEach(container => {
                container.addEventListener('mousemove', function(e) {
                    const rect = this.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;

                    // Tạo hiệu ứng ánh sáng theo vị trí chuột
                    this.style.background = `radial-gradient(circle at ${x}px ${y}px, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 60%), white`;
                });

                container.addEventListener('mouseleave', function() {
                    this.style.background = '#ffffff';
                });
            });
        }

        // Vẽ biểu đồ cột
        function renderBarChart(labels, data, colorPairs) {
            const ctx = document.getElementById('revenueChart').getContext('2d');

            // Tạo gradient cho từng cột
            const backgroundColors = [];
            const borderColors = [];
            const hoverBackgroundColors = [];
            const hoverBorderColors = [];

            for (let i = 0; i < 12; i++) {
                const gradient = ctx.createLinearGradient(0, 0, 0, 300);
                gradient.addColorStop(0, colorPairs[i].start);
                gradient.addColorStop(1, colorPairs[i].end);
                backgroundColors.push(gradient);
                borderColors.push(colorPairs[i].start);

                // Tạo gradient ngược cho hover effect
                const hoverGradient = ctx.createLinearGradient(0, 0, 0, 300);
                hoverGradient.addColorStop(0, colorPairs[i].end);
                hoverGradient.addColorStop(1, colorPairs[i].start);
                hoverBackgroundColors.push(hoverGradient);
                hoverBorderColors.push(lightenColor(colorPairs[i].start, 30));
            }

            const barChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                    {
                        label: 'Doanh thu tháng',
                        data: data,
                        backgroundColor: backgroundColors,
                        borderColor: borderColors,
                        borderWidth: 1,
                        borderRadius: 4,
                        hoverBackgroundColor: hoverBackgroundColors,
                        hoverBorderColor: hoverBorderColors,
                        hoverBorderWidth: 2,
                        barPercentage: 0.8,
                        categoryPercentage: 0.9,
                        // Thêm hiệu ứng transition
                        transition: {
                            duration: 0.4
                        },
                        order: 3 // Đặt thứ tự hiển thị sau đường xu hướng
                    },
                    {
                        label: 'Xu hướng doanh thu',
                        data: data,
                        type: 'line',
                        fill: false,
                        borderColor: '#4a6fa5',
                        borderWidth: function() {
                            return window.innerWidth < 576 ? 2 : 3;
                        },
                        pointRadius: 0, // Ẩn các điểm để đường mượt hơn
                        pointHoverRadius: function() {
                            return window.innerWidth < 576 ? 4 : 6;
                        },
                        pointHoverBackgroundColor: '#4a6fa5',
                        pointHoverBorderColor: '#fff',
                        tension: 0.4, // Làm mượt đường
                        order: 1, // Đặt thứ tự hiển thị trước cột
                        // Thêm hiệu ứng shadow cho đường
                        shadowColor: 'rgba(74, 111, 165, 0.5)',
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowOffsetY: 4
                    },
                    {
                        label: 'Doanh thu trung bình',
                        // Tính toán đường trung bình di động
                        data: (function() {
                            const movingAverage = [];
                            const windowSize = 3; // Kích thước cửa sổ trung bình di động

                            for (let i = 0; i < data.length; i++) {
                                let sum = 0;
                                let count = 0;

                                // Lấy giá trị trung bình của các điểm xung quanh
                                for (let j = Math.max(0, i - Math.floor(windowSize/2));
                                     j <= Math.min(data.length - 1, i + Math.floor(windowSize/2)); j++) {
                                    sum += data[j];
                                    count++;
                                }

                                movingAverage.push(sum / count);
                            }

                            return movingAverage;
                        })(),
                        type: 'line',
                        fill: false,
                        borderColor: '#ff6b6b',
                        borderWidth: function() {
                            return window.innerWidth < 576 ? 1.5 : 2;
                        },
                        borderDash: [5, 5], // Đường đứt nét
                        pointRadius: 0,
                        pointHoverRadius: function() {
                            return window.innerWidth < 576 ? 3 : 5;
                        },
                        pointHoverBackgroundColor: '#ff6b6b',
                        pointHoverBorderColor: '#fff',
                        tension: 0.4,
                        order: 2
                    }]
                },
                options: {
                    ...getCommonChartOptions('Biểu đồ cột doanh thu'),
                    onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const index = elements[0].index;
                            const month = index + 1; // Tháng bắt đầu từ 1
                            const monthName = labels[index];

                            // Hiển thị biểu đồ sản phẩm cho tháng được chọn
                            loadProductSalesForMonth(month, currentYear, monthName);
                        }
                    }
                }
            });

            // Thông báo biểu đồ đã được tạo
            document.dispatchEvent(new CustomEvent('chartCreated', {
                detail: { chart: barChart }
            }));
        }

        // Biến để lưu trữ biểu đồ sản phẩm
        let productSalesChart = null;

        // Hàm để chuyển đổi giữa các slide
        function showSlide(slideId) {
            // Ẩn tất cả các slide
            document.querySelectorAll('.chart-slide').forEach(slide => {
                slide.classList.remove('active');
            });

            // Hiển thị slide được chọn
            document.getElementById(slideId).classList.add('active');
        }

        // Hàm để hiển thị biểu đồ doanh thu
        function showRevenueChart() {
            showSlide('revenueChartSlide');

            // Cập nhật tiêu đề
            document.getElementById('chart-header').innerHTML = `
                <div class="statistic-icon">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <span class="statistic-main">Doanh thu theo tháng năm</span>
                <span class="statistic-sub">${currentYear}</span>
            `;
        }

        // Hàm để hiển thị biểu đồ sản phẩm
        function showProductSalesChart() {
            showSlide('productSalesSlide');
        }

        // Hàm để tải dữ liệu doanh số sản phẩm theo tháng
        function loadProductSalesForMonth(month, year, monthName) {
            // Hiển thị thông tin tháng được chọn
            document.getElementById('selectedMonthYear').textContent = `${monthName}`;

            // Chuyển đổi sang slide biểu đồ sản phẩm
            showProductSalesChart();

            // Cập nhật tiêu đề
            document.getElementById('chart-header').innerHTML = `
                <div class="statistic-icon" style="color: #ff6b6b;">
                    <i class="fas fa-chart-pie"></i>
                </div>
                <span class="statistic-main">Doanh số sản phẩm tháng</span>
                <span class="statistic-sub" style="color: #ff6b6b;">${monthName} ${year}</span>
            `;

            // Hiển thị loading
            document.getElementById('productSalesInfo').innerHTML = `
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Đang tải dữ liệu...</p>
                </div>
            `;

            // Gọi API để lấy dữ liệu
            fetch(`/Home/GetProductSalesForMonth?month=${month}&year=${year}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        renderProductSalesChart(data.data);
                        renderProductSalesList(data.data);
                    } else {
                        document.getElementById('productSalesInfo').innerHTML = `
                            <div class="alert alert-danger">
                                ${data.message || 'Không thể tải dữ liệu doanh số sản phẩm'}
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error fetching product sales data:', error);
                    document.getElementById('productSalesInfo').innerHTML = `
                        <div class="alert alert-danger">
                            Lỗi khi tải dữ liệu: ${error.message}
                        </div>
                    `;
                });
        }

        // Hàm để vẽ biểu đồ tròn doanh số sản phẩm
        function renderProductSalesChart(data) {
            const ctx = document.getElementById('productSalesChart').getContext('2d');

            // Hủy biểu đồ cũ nếu có
            if (productSalesChart) {
                productSalesChart.destroy();
            }

            // Lấy tối đa 10 sản phẩm có doanh số cao nhất
            const topProducts = data.products.slice(0, 10);

            // Chuẩn bị dữ liệu cho biểu đồ
            const labels = topProducts.map(p => p.productName);
            const salesData = topProducts.map(p => p.totalSales);

            // Tạo mảng màu ngẫu nhiên
            const backgroundColors = [
                '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
                '#FF9F40', '#8AC249', '#EA5545', '#F46A9B', '#EF9B20'
            ];

            // Tạo biểu đồ tròn
            productSalesChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: salesData,
                        backgroundColor: backgroundColors,
                        borderColor: 'white',
                        borderWidth: 2,
                        hoverBackgroundColor: backgroundColors.map(color => lightenColor(color, 10)),
                        hoverBorderColor: 'white',
                        hoverBorderWidth: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    aspectRatio: 2, // Giữ tỷ lệ giống biểu đồ cột
                    plugins: {
                        legend: {
                            position: 'bottom', // Đặt chú thích ở dưới để tiết kiệm không gian ngang
                            labels: {
                                font: {
                                    size: 11,
                                    family: "'Segoe UI', 'Roboto', sans-serif"
                                },
                                padding: 10,
                                usePointStyle: true,
                                pointStyle: 'circle',
                                boxWidth: 10 // Giảm kích thước ô màu
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            titleColor: '#333',
                            bodyColor: '#333',
                            titleFont: {
                                size: 14,
                                weight: 'bold',
                                family: "'Segoe UI', 'Roboto', sans-serif"
                            },
                            bodyFont: {
                                size: 13,
                                family: "'Segoe UI', 'Roboto', sans-serif"
                            },
                            padding: 12,
                            cornerRadius: 8,
                            displayColors: true,
                            borderColor: '#ddd',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw;
                                    const percentage = ((value / data.totalSales) * 100).toFixed(1);
                                    return `${label}: ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(value)} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    animation: {
                        animateRotate: true,
                        animateScale: true,
                        duration: 1000,
                        easing: 'easeOutQuart'
                    }
                }
            });
        }

        // Hàm để hiển thị danh sách sản phẩm
        function renderProductSalesList(data) {
            const container = document.getElementById('productSalesInfo');

            if (!data.products || data.products.length === 0) {
                container.innerHTML = `
                    <div class="alert alert-info">
                        Không có dữ liệu doanh số sản phẩm cho tháng này
                    </div>
                `;
                return;
            }

            let html = '';

            // Hiển thị tổng doanh số và số lượng - phiên bản gọn hơn
            html += `
                <div class="alert alert-success mb-2 p-2">
                    <div class="d-flex justify-content-between align-items-center small">
                        <div>
                            <i class="fas fa-money-bill-wave me-1"></i> Tổng doanh số:
                            <strong>${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(data.totalSales)}</strong>
                        </div>
                        <div>
                            <i class="fas fa-box me-1"></i> SL: <strong>${data.totalQuantity}</strong>
                        </div>
                    </div>
                </div>
            `;

            // Hiển thị danh sách sản phẩm
            data.products.forEach(product => {
                const imageUrl = product.imageUrl || '/images/no-image.png';

                html += `
                    <div class="product-item py-1 px-2 mb-1">
                        <img src="${imageUrl}" alt="${product.productName}" class="product-image-small">
                        <div class="product-details">
                            <div class="product-name small">${product.productName}</div>
                            <div class="product-stats small">
                                <div class="product-quantity">
                                    <i class="fas fa-cubes fa-xs"></i> ${product.quantity}
                                </div>
                                <div class="product-sales">
                                    <i class="fas fa-money-bill-wave fa-xs"></i> ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.totalSales)}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = html;
        }

        // Vẽ biểu đồ đường doanh thu tích lũy
        function renderTrendChart(labels, data) {
            const ctx = document.getElementById('trendChart').getContext('2d');

            // Tính toán dữ liệu tích lũy
            const cumulativeData = [];
            let cumulative = 0;

            for (let i = 0; i < data.length; i++) {
                cumulative += data[i];
                cumulativeData.push(cumulative);
            }

            // Tạo màu gradient cho line chart - màu xanh lá đến xanh dương
            const lineGradient = ctx.createLinearGradient(0, 0, 0, 300);
            lineGradient.addColorStop(0, '#00c6fb');
            lineGradient.addColorStop(0.5, '#005bea');
            lineGradient.addColorStop(1, '#4cc9f0');

            // Tạo màu gradient cho area fill - màu xanh dương mờ dần
            const areaGradient = ctx.createLinearGradient(0, 0, 0, 300);
            areaGradient.addColorStop(0, 'rgba(0, 198, 251, 0.7)');
            areaGradient.addColorStop(0.5, 'rgba(0, 91, 234, 0.4)');
            areaGradient.addColorStop(1, 'rgba(76, 201, 240, 0.0)');

            const lineChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Doanh thu tích lũy',
                        data: cumulativeData,
                        borderColor: lineGradient,
                        backgroundColor: areaGradient,
                        pointBackgroundColor: '#00c6fb',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: '#005bea',
                        pointRadius: function() {
                            return window.innerWidth < 576 ? 3 : (window.innerWidth < 768 ? 5 : 7);
                        },
                        pointHoverRadius: function() {
                            return window.innerWidth < 576 ? 5 : (window.innerWidth < 768 ? 7 : 10);
                        },
                        borderWidth: function() {
                            return window.innerWidth < 576 ? 2 : (window.innerWidth < 768 ? 3 : 4);
                        },
                        fill: true,
                        tension: 0.3, // Đường cong mượt mà nhưng không quá cong
                        borderJoinStyle: 'round',
                        borderCapStyle: 'round',
                        // Thêm hiệu ứng shadow cho đường
                        shadowColor: 'rgba(0, 198, 251, 0.5)',
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowOffsetY: 4,
                        // Thêm hiệu ứng animation
                        animation: {
                            delay: function(context) {
                                return context.dataIndex * 50;
                            }
                        }
                    }]
                },
                options: {
                    ...getCommonChartOptions('Biểu đồ doanh thu tích lũy'),
                    plugins: {
                        ...getCommonChartOptions('').plugins,
                        legend: {
                            position: 'top',
                            labels: {
                                font: {
                                    size: 16,
                                    family: "'Segoe UI', 'Roboto', sans-serif",
                                    weight: 'bold'
                                },
                                padding: 20,
                                usePointStyle: true,
                                pointStyle: 'circle',
                                color: '#333'
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.95)',
                            titleColor: '#005bea',
                            bodyColor: '#333',
                            titleFont: {
                                size: 16,
                                weight: 'bold',
                                family: "'Segoe UI', 'Roboto', sans-serif"
                            },
                            bodyFont: {
                                size: 14,
                                family: "'Segoe UI', 'Roboto', sans-serif"
                            },
                            padding: 15,
                            cornerRadius: 10,
                            displayColors: true,
                            borderColor: '#ddd',
                            borderWidth: 1,
                            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(context.parsed.y);
                                    }
                                    return label;
                                }
                            }
                        }
                    },
                    elements: {
                        line: {
                            tension: 0.3
                        },
                        point: {
                            radius: function() {
                                return window.innerWidth < 576 ? 3 : (window.innerWidth < 768 ? 5 : 7);
                            },
                            hoverRadius: function() {
                                return window.innerWidth < 576 ? 5 : (window.innerWidth < 768 ? 7 : 10);
                            },
                            backgroundColor: '#00c6fb',
                            borderColor: '#fff',
                            borderWidth: function() {
                                return window.innerWidth < 576 ? 1 : 2;
                            },
                            hoverBorderWidth: function() {
                                return window.innerWidth < 576 ? 2 : 3;
                            }
                        }
                    },
                    // Thêm cấu hình responsive cho màn hình nhỏ
                    responsive: true,
                    maintainAspectRatio: true,
                    aspectRatio: function() {
                        return window.innerWidth < 576 ? 1.5 : (window.innerWidth < 768 ? 1.8 : 2);
                    }
                }
            });

            // Thông báo biểu đồ đã được tạo
            document.dispatchEvent(new CustomEvent('chartCreated', {
                detail: { chart: lineChart }
            }));
        }

        // Gọi hàm vẽ biểu đồ khi trang đã tải xong
        document.addEventListener('DOMContentLoaded', function() {
            renderCharts();

            // Thêm sự kiện resize để cập nhật biểu đồ khi kích thước màn hình thay đổi
            let resizeTimeout;
            window.addEventListener('resize', function() {
                // Sử dụng debounce để tránh gọi quá nhiều lần
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(function() {
                    // Hủy các biểu đồ cũ
                    Chart.getChart('revenueChart')?.destroy();
                    Chart.getChart('trendChart')?.destroy();

                    // Vẽ lại biểu đồ
                    renderCharts();

                    // Nếu đang ở trang sản phẩm và có dữ liệu, vẽ lại biểu đồ sản phẩm
                    if (document.getElementById('productSalesSlide').classList.contains('active') && productSalesChart) {
                        productSalesChart.destroy();
                        renderProductSalesChart(window.currentProductSalesData);
                    }
                }, 300);
            });
        });

        // Lưu dữ liệu sản phẩm hiện tại để có thể vẽ lại khi resize
        window.currentProductSalesData = null;

        // Ghi đè hàm renderProductSalesChart để lưu dữ liệu
        const originalRenderProductSalesChart = renderProductSalesChart;
        renderProductSalesChart = function(data) {
            window.currentProductSalesData = data;
            originalRenderProductSalesChart(data);
        };
    </script>
}

<style>
    .realtime-stats-card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        background: #ffffff;
        overflow: hidden;
    }

    .realtime-stats-header {
        background: linear-gradient(135deg, #2c3e50, #3498db);
        padding: 1.5rem;
        border: none;
    }

    .realtime-header-icon {
        width: 50px;
        height: 50px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
    }

    .realtime-header-icon i {
        font-size: 24px;
        color: #ffffff;
    }

    .realtime-header-content {
        flex: 1;
    }

    .realtime-header-title {
        color: #ffffff;
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
        letter-spacing: 0.5px;
    }

    .realtime-header-subtitle {
        display: flex;
        align-items: center;
        color: rgba(255, 255, 255, 0.8);
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .pulse-dot {
        width: 8px;
        height: 8px;
        background: #4cd137;
        border-radius: 50%;
        margin-right: 8px;
        position: relative;
    }

    .pulse-dot::after {
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;
        background: #4cd137;
        border-radius: 50%;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
            opacity: 1;
        }
        100% {
            transform: scale(3);
            opacity: 0;
        }
    }

    .realtime-stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
        padding: 1.5rem;
    }

    .mini-stat-item {
        background: #ffffff;
        border-radius: 12px;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        transition: all 0.3s ease;
        border: 1px solid rgba(0, 0, 0, 0.05);
        position: relative;
        overflow: hidden;
    }

    .mini-stat-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, var(--stat-color), transparent);
        opacity: 0.1;
        transition: all 0.3s ease;
    }

    .mini-stat-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    }

    .mini-stat-item:hover::before {
        opacity: 0.2;
    }

    .mini-stat-icon {
        width: 60px;
        height: 60px;
        background: var(--stat-color);
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        transition: all 0.3s ease;
    }

    .mini-stat-item:hover .mini-stat-icon {
        transform: scale(1.1) rotate(5deg);
    }

    .mini-stat-icon i {
        font-size: 24px;
        color: #ffffff;
    }

    .mini-stat-info {
        flex: 1;
    }

    .mini-stat-value {
        font-size: 1.75rem;
        font-weight: 700;
        margin: 0;
        color: #2c3e50;
        line-height: 1.2;
    }

    .mini-stat-label {
        font-size: 0.875rem;
        color: #7f8c8d;
        margin: 0.25rem 0;
    }

    .mini-stat-trend {
        display: flex;
        align-items: center;
        font-size: 0.75rem;
        color: var(--stat-color);
        margin-top: 0.5rem;
    }

    .mini-stat-trend i {
        margin-right: 0.25rem;
    }

    .value-updated {
        animation: valueUpdate 0.5s ease;
    }

    @@keyframes valueUpdate {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.1);
            color: var(--stat-color);
        }
        100% {
            transform: scale(1);
        }
    }

    @@media (max-width: 768px) {
        .realtime-stats-container {
            grid-template-columns: 1fr;
        }

        .mini-stat-item {
            padding: 1rem;
        }

        .mini-stat-icon {
            width: 50px;
            height: 50px;
        }

        .mini-stat-value {
            font-size: 1.5rem;
        }
    }
</style>
